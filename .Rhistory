}
col = c("red", "green", "blue", "black")
for (i in 1:4){
curve(dbeta(x, parameters[i], parameters[i]), add = TRUE, col = col[i] )
}
# α = β = 0.5, 1.0, 10, 100
parameters = c(0.5, 1.0, 10, 100)
par(mfrow = c(1,1))
col = c("red", "green", "blue", "black")
for (i in 1:4){
curve(dbeta(x, parameters[i], parameters[i]), add = TRUE, col = col[i] )
}
x <- rnorm(n)
n <- c(10, 100, 1000, 10000)
x <- rnorm(n)
x
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:4){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print("n = ", n[i])
print("|x.mean - mean| = ", abs(x.mean))
}
print(paste("|x.mean - mean| = ", abs(x.mean)))
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:4){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n = ", n[i]))
print(paste("|x.mean - mean| = ", abs(x.mean)))
}
print(paste(n = , n[i]))
print(paste(n = , n[i]))
print(paste("n =  " , n[i]))
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:4){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - mean| = ", abs(x.mean)))
}
for (i in 1:4){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000000)
for (i in 1:4){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000000)
for (i in 1:4){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
n <- c(10, 100, 1000, 10000, 100000, 1000000)
for (i in 1:5){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
for (i in 1:length(n)){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
for (i in 1:length(n)){
x <- rnorm(n[i], mean = 0, sd = 1)
x.mean <- mean(x)
print(paste("n =  " , n[i]))
print(paste("|x.mean - 0| = ", abs(x.mean)))
}
11^2/(100*12*2)
install.packages("caTools")  # install external package
library(caTools)             # external package providing write.gif function
jet.colors <- colorRampPalette(c("green", "pink", "#007FFF", "cyan", "#7FFF7F",
"white", "#FF7F00", "red", "#7F0000"))
dx <- 1500                    # define width
dy <- 1400                    # define height
C  <- complex(real = rep(seq(-2.2, 1.0, length.out = dx), each = dy),
imag = rep(seq(-1.2, 1.2, length.out = dy), dx))
C <- matrix(C, dy, dx)       # reshape as square matrix of complex numbers
Z <- 0                       # initialize Z to zero
X <- array(0, c(dy, dx, 20)) # initialize output 3D array
for (k in 1:20) {            # loop with 20 iterations
Z <- Z^2 + C               # the central difference equation
X[, , k] <- exp(-abs(Z))   # capture results
}
write.gif(X, "Mandelbrot.gif", col = jet.colors, delay = 100)
pwd
pwd()
wd()
pwd()
getwd()
jet.colors <- colorRampPalette(c("green", "pink", "#007FFF", "cyan", "#7FFF7F",
"white", "#FF7F00", "red", "#7F0000"))
dx <- 500                    # define width
dy <- 400                    # define height
C  <- complex(real = rep(seq(-2.2, 1.0, length.out = dx), each = dy),
imag = rep(seq(-1.2, 1.2, length.out = dy), dx))
C <- matrix(C, dy, dx)       # reshape as square matrix of complex numbers
Z <- 0                       # initialize Z to zero
X <- array(0, c(dy, dx, 20)) # initialize output 3D array
for (k in 1:20) {            # loop with 20 iterations
Z <- Z^2 + C               # the central difference equation
X[, , k] <- exp(-abs(Z))   # capture results
}
write.gif(X, "Mandelbrot.gif", col = jet.colors, delay = 50)
data(cats)
data(iris)
force(iris)
View(Z)
0.5^2/0.04^2
?cor
plot(curve(dbinom(x)))
plot(curve(dbinom(x, 20)))
plot(curve(dbinom(x, 20, 0.5)))
plot(0:20, dbinom(0:20, 20, 0.5), xlab = "x", ylab = "f(x)")
plot(0:20, dbinom(0:20, 20, 0.5), xlab = "x", ylab = "f(x)")
plot(0:20, dbinom(0:20, 200, 0.5), xlab = "x", ylab = "f(x)")
plot(0:20, dbinom(0:20, 20, 0.5), xlab = "x", ylab = "f(x)")
plot(0:20, dbinom(0:20, 20, 0.2), xlab = "x", ylab = "f(x)")
plot(0:20, dbinom(0:20, 20, 0.7), xlab = "x", ylab = "f(x)")
plot(0:20, dbinom(0:20, 20, 0.9), xlab = "x", ylab = "f(x)")
284+2*0.96
.284+2*0.96
0.384+2*0.096
1*0.384+2*0.096
?chisq.test
?dnrom
?dnorm
plot(c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), pnorm(c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1)))
x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1)
plot(x,pbin(x))
plot(x,pbinom(x))
plot(x,pbinom(x, 20, 0.5))
plot(x,pbinom(x, 20, 0.5))
0.384+4*0.096-0.6
mean = 0*0.512+1*0.384+2*0.096
mean
var = 0*0.512+1*0.384+4*0.096 - mean*mean
var
23+qt(0.01/2,99)*(12/20)
23+pt(0.01/2,99)*(12/20)
23+qt(0.01/2,99)*(12/10)
23-qt(0.01/2,99)*(12/10)
?qexp
n <- 100
R <- 10000
a <-3
b<-2
sample<-rep(NA,R)
for(i in 1:R){
u<-runif(n)
sample[i]<-sum(b)*qexp(u)
}
hist(sample, prob=TRUE)
curve(dnorm(x,n*b,n*b), add=TRUE)
curve(dnorm(x,n*a,sqrt(n*b*b), add=TRUE)
n <- 100
R <- 10000
a <-3
b <-2
sample<-rep(NA,R)
for(i in 1:R){
u<-runif(n)
sample[i]<-sum(b)*qexp(u)
}
hist(sample, prob=TRUE)
curve(dnorm(x,n*a,sqrt(n*b*b), add=TRUE)
curve(dnorm(x,n*a,sqrt(n*b), add=TRUE)
sample<-rep(NA,R)
for(i in 1:R){
u<-runif(n)
sample[i]<-sum(b)*qexp(u)
}
hist(sample, prob=TRUE)
curve(dnorm(x,n*a,sqrt(n*b), add=TRUE)
curve(dnorm(x,n*a,sqrt(n*b), add=TRUE))
curve(dnorm(x,n*a,sqrt(n*b), add=TRUE))
4.10363+(-0.20505)
exp(2.997+0.005*20)
exp(2.997+0.005*21)
exp(2.997+0.005*21)/exp(2.997+0.005*20)
exp(2.997+0.005*25)
exp(2.997+0.005*0)
0.0591+c(-1,1)*0.01785*qnorm(0.995)
version
#print hello world
print("Hello World")
#print the answer to all questions
print("The answer to all questions is 42")
knitr::opts_chunk$set(echo = TRUE)
logistic_model <- glm(y~weight+color,family=binomial,data=crabs)
library(MASS)
data(crabs)
logistic_model <- glm(y~weight+color,family=binomial,data=crabs)
library(MASS)
data(crabs)
crabs$y <- as.factor(crabs$y)
data(crabs)
summary(crabs)
getwd()
setwd("/home/alessandro/uni/SM/StatisticalMethodsProject")
setwd("~/uni/SM/StatisticalMethodsProject")
getwd()
setwd("~")
getwd()
setwd("~/uni")
getwd()
setwd("DSAI")
setwd("SM")
setwd("StatisticalMethodsProject")
getwd()
# load the data
# load the data
data <- read.csv("data/caravan-insurance-challenge.csv", header = TRUE, sep = ",")
summary(data)
# check for missing values
sum(is.na(data))
#boxplot the last 22 variables
boxplot(data[,64:86], main = "Boxplot of the last 22 variables", xlab = "Variables", ylab = "Values")
View(data)
View(data)
#check for missing values
sum(is.na(data))
plot(cars)
plot(cars)
df <- read.csv("data/caravan-insurance-challenge.csv")
View(data)
df <- read.csv("data/caravan-insurance-challenge.csv")<
df <- read.csv("data/caravan-insurance-challenge.csv")
sum(is.na(df))
sapply(df, function(x) sum(is.na(x)))
```{r}
sapply(df, function(x) sum(is.na(x)))
sapply(df, class)
df_train <- df[df["ORIGIN"] == "train"]
df_test <- df[df["ORIGIN"] == "test"]
df_train <- df_train[, -which(names(df_train) == "ORIGIN")]
df_train <- df_train[, -1]
df_train <- df_train[,-1]
dim(df)
df_train <- df_train[,-1]
df_train <- df_train[,-1]
df_test <- df_test[, -which(names(df_test) == "ORIGIN")]
dim(df_train)
df_train <- df[df["ORIGIN"] == "train"]
df_test <- df[df["ORIGIN"] == "test"]
df["ORIGIN"] == "train"
df_train <- df[df["ORIGIN"] == "train",]
df_test <- df[df["ORIGIN"] == "test",]
dim(df_train)
which(names(df_test) == "ORIGIN")
```{r}
df_train <- df_train[,-which(names(df_test) == "ORIGIN")]
df_test <- df_test[, -which(names(df_test) == "ORIGIN")]
df <- read.csv("data/caravan-insurance-challenge.csv")
dim(df)
sapply(df, function(x) sum(is.na(x)))
sapply(df, class)
df_train <- df[df["ORIGIN"] == "train",]
df_test <- df[df["ORIGIN"] == "test",]
df_train <- df_train[,-which(names(df_test) == "ORIGIN")]
df_test <- df_test[, -which(names(df_test) == "ORIGIN")]
#write.csv(df_train, "data/caravan-insurance-challenge-train.csv", row.names = FALSE)
#write.csv(df_test, "data/caravan-insurance-challenge-test.csv", row.names = FALSE)
table(df_train$CARAVAN)
table(df_train$CARAVAN)
#rate of positive cases
sum(df_train$CARAVAN == 1)/nrow(df_train)
View(df)
install.packages(c("shiny", "plotly"))
install.packages(c("shiny", "plotly"))
install.packages(c("shiny", "plotly"))
install.packages(c("shiny", "plotly"))
```{r}
library(shiny)
library(plotly)
# Define UI
ui <- fluidPage(
titlePanel("Categorical Variable Distribution"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Select Variable", choices = names(df_train), selected = NULL)
),
mainPanel(
plotlyOutput("barplot")
)
)
)
# Run the Shiny app
shinyApp(ui, server)
# Define server logic
server <- function(input, output) {
# Create reactive expression for the selected variable
selected_variable <- reactive({
input$variable
})
# Create barplot
output$barplot <- renderPlotly({
variable <- selected_variable()
if (!is.null(variable)) {
plot_data <- df_train %>%
group_by({{variable}}) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Create a bar plot using plotly
plot_ly(data = plot_data, x = ~{{variable}}, y = ~count, type = "bar", name = "Count") %>%
layout(title = paste("Distribution of", variable),
xaxis = list(title = variable),
yaxis = list(title = "Count"))
}
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
titlePanel("Categorical Variable Distribution"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Select Variable", choices = names(df_train), selected = NULL)
),
mainPanel(
plotlyOutput("barplot")
)
)
)
library(shiny)
library(plotly)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
library(plotly)
# Define UI
ui <- fluidPage(
titlePanel("Categorical Variable Distribution"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Select Variable", choices = names(df_train), selected = NULL)
),
mainPanel(
plotlyOutput("barplot")
)
)
)
# Define UI
ui <- fluidPage(
titlePanel("Categorical Variable Distribution"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Select Variable", choices = names(df_train), selected = NULL)
),
mainPanel(
plotlyOutput("barplot")
)
)
)
library(shiny)
library(htmltools)
library(plotly)
# Define UI
ui <- fluidPage(
titlePanel("Categorical Variable Distribution"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Select Variable", choices = names(df_train), selected = NULL)
),
mainPanel(
plotlyOutput("barplot")
)
)
)
# Define server logic
server <- function(input, output) {
# Create reactive expression for the selected variable
selected_variable <- reactive({
input$variable
})
# Create barplot
output$barplot <- renderPlotly({
variable <- selected_variable()
if (!is.null(variable)) {
plot_data <- df_train %>%
group_by({{variable}}) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Create a bar plot using plotly
plot_ly(data = plot_data, x = ~{{variable}}, y = ~count, type = "bar", name = "Count") %>%
layout(title = paste("Distribution of", variable),
xaxis = list(title = variable),
yaxis = list(title = "Count"))
}
})
}
# Run the Shiny app
shinyApp(ui, server)
```{r}
par(mfrow = c(4, 4))
for (i in 1:length(categorical_variables)) {
barplot(table(df_train[,categorical_variables[i]]), main = categorical_variables[i])
}
View(server)
categorical_variables <- names(df_train)[!(names(df_train) %in% c("MAANTHUI", "MGEMOMV"))]
categorical_variables <- names(df_train)[!(names(df_train) %in% c("MAANTHUI", "MGEMOMV"))]
df_train[,categorical_variables] <- lapply(df_train[,categorical_variables], factor)
categorical_variables <- names(df_train)[!(names(df_train) %in% c("MAANTHUI", "MGEMOMV"))]
df_train[,categorical_variables] <- lapply(df_train[,categorical_variables], factor)
Visualize the distribution of the variables using a barplot.
```{r}
par(mfrow = c(4, 4))
for (i in 1:length(categorical_variables)) {
barplot(table(df_train[,categorical_variables[i]]), main = categorical_variables[i])
}
correlations <- cor(df_train[,categorical_variables])
df <- read.csv("data/caravan-insurance-challenge.csv")
dim(df)
sapply(df, function(x) sum(is.na(x)))
sapply(df, class)
df_train <- df[df["ORIGIN"] == "train",]
df_test <- df[df["ORIGIN"] == "test",]
df_train <- df_train[,-which(names(df_test) == "ORIGIN")]
df_test <- df_test[, -which(names(df_test) == "ORIGIN")]
write.csv(df_train, "data/caravan-insurance-challenge-df_train.csv", row.names = FALSE)
write.csv(df_test, "data/caravan-insurance-challenge-df_test.csv", row.names = FALSE)
table(df_train$CARAVAN)
sum(df_train$CARAVAN == 1)/nrow(df_train)
categorical_variables <- names(df_train)[!(names(df_train) %in% c("MAANTHUI", "MGEMOMV"))]
df_train[,categorical_variables] <- lapply(df_train[,categorical_variables], factor)
par(mfrow = c(4, 4))
for (i in 1:length(categorical_variables)) {
barplot(table(df_train[,categorical_variables[i]]), main = categorical_variables[i])
}
df <- read.csv("data/caravan-insurance-challenge.csv")
dim(df)
sapply(df, function(x) sum(is.na(x)))
sapply(df, class)
df_train <- df[df["ORIGIN"] == "train",]
df_test <- df[df["ORIGIN"] == "test",]
df_train <- df_train[,-which(names(df_test) == "ORIGIN")]
df_test <- df_test[, -which(names(df_test) == "ORIGIN")]
write.csv(df_train, "data/caravan-insurance-challenge-df_train.csv", row.names = FALSE)
write.csv(df_test, "data/caravan-insurance-challenge-df_test.csv", row.names = FALSE)
table(df_train$CARAVAN)
sum(df_train$CARAVAN == 1)/nrow(df_train)
categorical_variables <- names(df_train)[!(names(df_train) %in% c("MAANTHUI", "MGEMOMV"))]
df_train[,categorical_variables] <- lapply(df_train[,categorical_variables], factor)
par(mfrow = c(4, 4))
for (i in 1:length(categorical_variables)) {
barplot(table(df_train[,categorical_variables[i]]), main = categorical_variables[i])
}
for (i in 1:length(categorical_variables)) {
barplot(table(df_train[,categorical_variables[i]]), main = categorical_variables[i])
}
